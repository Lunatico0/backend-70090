paths:
  /api/users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
    post:
      summary: Create a new user
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/CreateUser'
      responses:
        '201':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error

  /api/users/{uid}:
    get:
      summary: Get a user by uid
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user by uid
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/UpdateUser'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete a user by uid
      tags:
        - users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for a user autogenerated by MongoDB
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user
      example:
        _id: "6748fe66de5051c064dacd7d"
        first_name: Patricio
        last_name: Pittana
        email: pittanapatricio@gmail.com
        password: 1234
  requestBodies:
    CreateUser:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user
      example:
        first_name: Jorge
        last_name: Nitales
        email: jorgennitales@gmail.com
        password: 1234
    UpdateUser:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The password of the user
      example:
        first_name: Jorge
        last_name: Nitales
        email: jorgennitales@gmail.com
        password: 1234
